stages:
- stage: NugetPublish
  dependsOn: PackageBuild
  displayName: Publish Nuget Package
  pool:
    name: DAS - Continuous Deployment
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/DASD0-8309-MigrateCluster'), eq(variables['Build.Reason'], 'Manual'))
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/DASD0-8309-MigrateCluster'))
  jobs:
  - job: CleanArtifacts
    displayName: Clean artifacts directory
    workspace:
      clean: all
  - deployment: NugetPush
    dependsOn: CleanArtifacts
    environment: Nuget
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: NugetPackages
          - task: NuGetCommand@2
            displayName: NuGet push
            inputs:
              command: push
              packagesToPush: $(Pipeline.Workspace)/NugetPackages/**/*.nupkg;!$(Pipeline.Workspace)/NugetPackages/**/*.symbols.nupkg
              nuGetFeedType: external
              publishFeedCredentials: SFA NuGet
            continueOnError: true